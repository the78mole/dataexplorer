//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.1.5-b01-fcs
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2016.12.14 at 04:26:28 PM MEZ
//
/**************************************************************************************
  	This file is part of GNU DataExplorer.

    GNU DataExplorer is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    DataExplorer is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with GNU DataExplorer.  If not, see <http://www.gnu.org/licenses/>.

    Copyright (c) 2017 Thomas Eickert
****************************************************************************************/

package gde.histo.cache;

import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Optional;
import java.util.TreeMap;
import java.util.logging.Logger;

import javax.xml.XMLConstants;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.XmlAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import javax.xml.validation.SchemaFactory;

import gde.GDE;
import gde.config.Settings;
import gde.device.IDevice;
import gde.log.Level;
import gde.ui.DataExplorer;
import gde.utils.StringHelper;

/**
 * aggregated history recordset data related to measurements, settlements and
 * 				scores.
 * 				No localization required.
 *
 *
 * <p>Java class for histoVault complex type.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>
 * &lt;complexType name="histoVault">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="vaultName" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="vaultDirectory" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="vaultCreated_ms" type="{http://www.w3.org/2001/XMLSchema}long"/>
 *         &lt;element name="vaultDataExplorerVersion" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="vaultDeviceKey" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="vaultDeviceName" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="vaultChannelNumber" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *         &lt;element name="vaultObjectKey" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="vaultSamplingTimespan_ms" type="{http://www.w3.org/2001/XMLSchema}long"/>
 *         &lt;element name="logFilePath" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="logFileLastModified" type="{http://www.w3.org/2001/XMLSchema}long"/>
 *         &lt;element name="logFileLength" type="{http://www.w3.org/2001/XMLSchema}long"/>
 *         &lt;element name="logObjectDirectory" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="logFileVersion" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *         &lt;element name="logRecordSetSize" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *         &lt;element name="logRecordSetOrdinal" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *         &lt;element name="logRecordsetBaseName" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="logDeviceName" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="logChannelNumber" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *         &lt;element name="logObjectKey" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="logStartTimestamp_ms" type="{http://www.w3.org/2001/XMLSchema}long"/>
 *         &lt;element name="measurements" type="{}entryCompartments"/>
 *         &lt;element name="settlements" type="{}entryCompartments"/>
 *         &lt;element name="scores" type="{}entryPoints"/>
 *        &lt;/sequence>
 *      &lt;/restriction>
 *    &lt;/complexContent>
 *  &lt;/complexType>
 * </pre>
 *
 *
 */

/**
 * Suitable for history persistence and xml serialization.
 * May exist in two stages:
 *  - truss: does not hold measurement, settlement or score points
 *  - vault: the number of points conform to the device xml for settlements and scores, but only a subset of measurements is required
 * Find the constructors and non-xsd code a good way down for simplified merging with JAXB generated class.
 * @author Thomas Eickert
 */
@XmlRootElement
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "histoVault", propOrder = { "vaultName", "vaultDirectory", "vaultCreatedMs", "vaultDataExplorerVersion", "vaultDeviceKey", "vaultDeviceName", "vaultChannelNumber", "vaultObjectKey",
		"vaultSamplingTimespanMs", "logFilePath", "logFileLastModified", "logFileLength", "logObjectDirectory", "logFileVersion", "logRecordSetSize", "logRecordSetOrdinal", "logRecordsetBaseName",
		"logDeviceName", "logChannelNumber", "logObjectKey", "logStartTimestampMs", "measurements", "settlements", "scores" })
public class HistoVault {
	final private static String									$CLASS_NAME	= HistoVault.class.getName();
	final private static Logger									log					= Logger.getLogger($CLASS_NAME);

	private static JAXBContext									jaxbContext;
	private static Unmarshaller									jaxbUnmarshaller;
	private static Marshaller										jaxbMarshaller;

	@XmlTransient
	private final DataExplorer									application	= DataExplorer.getInstance();
	@XmlTransient
	private final Settings											settings		= Settings.getInstance();
	@XmlTransient
	private final IDevice												device			= this.application.getActiveDevice();

	@XmlElement(required = true)
	protected String														vaultName;
	@XmlElement(required = true)
	protected String														vaultDirectory;
	@XmlElement(name = "vaultCreated_ms")
	protected long															vaultCreatedMs;
	@XmlElement(required = true)
	protected String														vaultDataExplorerVersion;
	@XmlElement(required = true)
	protected String														vaultDeviceKey;
	@XmlElement(required = true)
	protected String														vaultDeviceName;
	protected int																vaultChannelNumber;
	@XmlElement(required = true)
	protected String														vaultObjectKey;
	@XmlElement(name = "vaultSamplingTimespan_ms")
	protected long															vaultSamplingTimespanMs;
	@XmlElement(required = true)
	protected String														logFilePath;
	protected long															logFileLastModified;
	protected long															logFileLength;
	@XmlElement(required = true)
	protected String														logObjectDirectory;
	protected int																logFileVersion;
	protected int																logRecordSetSize;
	protected int																logRecordSetOrdinal;
	@XmlElement(required = true)
	protected String														logRecordsetBaseName;
	@XmlElement(required = true)
	protected String														logDeviceName;
	protected int																logChannelNumber;
	@XmlElement(required = true)
	protected String														logObjectKey;
	@XmlElement(name = "logStartTimestamp_ms")
	protected long															logStartTimestampMs;
	@XmlElement(required = true)
	@XmlJavaTypeAdapter(CompartmentsTypeAdapter.class)
	protected HashMap<Integer, CompartmentType>	measurements;
	@XmlElement(required = true)
	@XmlJavaTypeAdapter(CompartmentsTypeAdapter.class)
	protected HashMap<Integer, CompartmentType>	settlements;
	@XmlElement(required = true)
	@XmlJavaTypeAdapter(PointsTypeAdapter.class)
	protected HashMap<Integer, PointType>				scores;

	/**
	   * Gets the value of the vaultName property.
	   *
	   * @return
	   *     possible object is
	   *     {@link String }
	   *
	   */
	public String getVaultName() {
		return vaultName;
	}

	/**
	   * Sets the value of the vaultName property.
	   *
	   * @param value
	   *     allowed object is
	   *     {@link String }
	   *
	   */
	public void setVaultName(String value) {
		this.vaultName = value;
	}

	/**
	* Gets the value of the vaultDirectory property.
	*
	* @return
	*     possible object is
	*     {@link String }
	*
	*/
	public String getVaultDirectory() {
		return vaultDirectory;
	}

	/**
	 * Sets the value of the vaultDirectory property.
	 *
	 * @param value
	 *     allowed object is
	 *     {@link String }
	 *
	 */
	public void setVaultDirectory(String value) {
		this.vaultDirectory = value;
	}

	/**
	 * Gets the value of the vaultCreatedMs property.
	 *
	 */
	public long getVaultCreated_ms() {
		return vaultCreatedMs;
	}

	/**
	   * Sets the value of the vaultCreatedMs property.
	   *
	   */
	public void setVaultCreated_Ms(long value) {
		this.vaultCreatedMs = value;
	}

	/**
	 * Gets the value of the vaultDataExplorerVersion property.
	*
	 * @return
	 *     possible object is
	 *     {@link String }
	 *
	*/
	public String getVaultDataExplorerVersion() {
		return vaultDataExplorerVersion;
	}

	/**
	 * Sets the value of the vaultDataExplorerVersion property.
	 *
	 * @param value
	 *     allowed object is
	 *     {@link String }
	 *
	 */
	public void setVaultDataExplorerVersion(String value) {
		this.vaultDataExplorerVersion = value;
	}

	/**
	   * Gets the value of the vaultDeviceKey property.
	 *
	 * @return
	 *     possible object is
	   *     {@link String }
	 *
	 */
	public String getVaultDeviceKey() {
		return vaultDeviceKey;
	}

	/**
	 * Sets the value of the vaultDeviceKey property.
	 *
	 * @param value
	 *     allowed object is
	 *     {@link String }
	 *
	 */
	public void setVaultDeviceKey(String value) {
		this.vaultDeviceKey = value;
	}

	/**
	   * Gets the value of the vaultDeviceName property.
	   *
	   * @return
	   *     possible object is
	   *     {@link String }
	   *
	   */
	public String getVaultDeviceName() {
		return vaultDeviceName;
	}

	/**
	 * Sets the value of the vaultDeviceName property.
	 *
	 * @param value
	 *     allowed object is
	 *     {@link String }
	 *
	 */
	public void setVaultDeviceName(String value) {
		this.vaultDeviceName = value;
	}

	/**
	 * @return the channel number which was active during vault creation.
	 */
	public int getVaultChannelNumber() {
		return vaultChannelNumber;
	}

	/**
	   * Sets the value of the vaultChannelNumber property.
	   *
	   */
	public void setVaultChannelNumber(int value) {
		this.vaultChannelNumber = value;
	}

	/**
	 * Gets the value of the vaultObjectKey property.
	*
	* @return
	*     possible object is
	*     {@link String }
	*
	*/
	public String getVaultObjectKey() {
		return vaultObjectKey;
	}

	/**
	 * Sets the value of the vaultObjectKey property.
	 *
	 * @param value
	 *     allowed object is
	 *     {@link String }
	 *
	 */
	public void setVaultObjectKey(String value) {
		this.vaultObjectKey = value;
	}

	/**
	 * Gets the value of the vaultSamplingTimespanMs property.
	 *
	 */
	public long getVaultSamplingTimespan_ms() {
		return vaultSamplingTimespanMs;
	}

	/**
	 * Sets the value of the vaultSamplingTimespanMs property.
	 *
	 */
	public void setVaultSamplingTimespan_Ms(long value) {
		this.vaultSamplingTimespanMs = value;
	}

	/**
	 * Gets the value of the logFilePath property.
	 *
	 * @return
	 *     possible object is
	 *     {@link String }
	 *
	 */
	public String getLogFilePath() {
		return logFilePath;
	}

	/**
	 * Sets the value of the logFilePath property.
	 *
	 * @param value
	 *     allowed object is
	 *     {@link String }
	 *
	 */
	public void setLogFilePath(String value) {
		this.logFilePath = value;
	}

	/**
	 * Gets the value of the logFileLastModified property.
	 *
	 */
	public long getLogFileLastModified() {
		return logFileLastModified;
	}

	/**
	 * Sets the value of the logFileLastModified property.
	 *
	 */
	public void setLogFileLastModified(long value) {
		this.logFileLastModified = value;
	}

	/**
	 * Gets the value of the logFileLength property.
	 *
	 */
	public long getLogFileLength() {
		return logFileLength;
	}

	/**
	 * Sets the value of the logFileLength property.
	 *
	 */
	public void setLogFileLength(long value) {
		this.logFileLength = value;
	}

	/**
	 * Gets the value of the logObjectDirectory property.
	 *
	 * @return
	 *     possible object is
	 *     {@link String }
	 *
	 */
	public String getLogObjectDirectory() {
		return logObjectDirectory;
	}

	/**
	   * Sets the value of the logObjectDirectory property.
	   *
	   * @param value
	   *     allowed object is
	   *     {@link String }
	   *
	   */
	public void setLogObjectDirectory(String value) {
		this.logObjectDirectory = value;
	}

	/**
	* Gets the value of the logFileVersion property.
	*
	*/
	public int getLogFileVersion() {
		return logFileVersion;
	}

	/**
	 * Sets the value of the logFileVersion property.
	 *
	 */
	public void setLogFileVersion(int value) {
		this.logFileVersion = value;
	}

	/**
	 * Gets the value of the logRecordSetSize property.
	 *
	 */
	public int getLogRecordSetSize() {
		return logRecordSetSize;
	}

	/**
	   * Sets the value of the logRecordSetSize property.
	   *
	   */
	public void setLogRecordSetSize(int value) {
		this.logRecordSetSize = value;
	}

	/**
	 * Gets the value of the logRecordSetOrdinal property.
	*
	*/
	public int getLogRecordSetOrdinal() {
		return logRecordSetOrdinal;
	}

	/**
	   * Sets the value of the logRecordSetOrdinal property.
	   *
	   */
	public void setLogRecordSetOrdinal(int value) {
		this.logRecordSetOrdinal = value;
	}

	/**
	 * Gets the value of the logRecordsetBaseName property.
	*
	* @return
	*     possible object is
	*     {@link String }
	*
	*/
	public String getLogRecordsetBaseName() {
		return logRecordsetBaseName;
	}

	/**
	 * Sets the value of the logRecordsetBaseName property.
	 *
	 * @param value
	 *     allowed object is
	 *     {@link String }
	 *
	 */
	public void setLogRecordsetBaseName(String value) {
		this.logRecordsetBaseName = value;
	}

	/**
	 * Gets the value of the logDeviceName property.
	 *
	 * @return
	 *     possible object is
	 *     {@link String }
	 *
	 */
	public String getLogDeviceName() {
		return logDeviceName;
	}

	/**
	   * Sets the value of the logDeviceName property.
	   *
	   * @param value
	   *     allowed object is
	   *     {@link String }
	   *
	   */
	public void setLogDeviceName(String value) {
		this.logDeviceName = value;
	}

	/**
	* Gets the value of the logChannelNumber property.
	*
	*/
	public int getLogChannelNumber() {
		return logChannelNumber;
	}

	/**
	 * Sets the value of the logChannelNumber property.
	 *
	 */
	public void setLogChannelNumber(int value) {
		this.logChannelNumber = value;
	}

	/**
	 * Gets the value of the logObjectKey property.
	 *
	 * @return
	 *     possible object is
	 *     {@link String }
	 *
	 */
	public String getLogObjectKey() {
		return logObjectKey;
	}

	/**
	 * Sets the value of the logObjectKey property.
	 *
	 * @param value
	 *     allowed object is
	 *     {@link String }
	 *
	 */
	public void setLogObjectKey(String value) {
		this.logObjectKey = value;
	}

	/**
	 * Gets the value of the logStartTimestampMs property.
	 *
	 */
	public long getLogStartTimestamp_ms() {
		return logStartTimestampMs;
	}

	/**
	 * Sets the value of the logStartTimestampMs property.
	 *
	 */
	public void setLogStartTimestampMs(long value) {
		this.logStartTimestampMs = value;
	}

	/**
	 * Gets the value of the measurements property.
	 *
	 * @return
	 *     possible object is
	 *     {@link CompartmentsType }
	 *
	 */
	public HashMap<Integer, CompartmentType> getMeasurements() {
		if (this.measurements == null) this.measurements = new HashMap<Integer, CompartmentType>();
		return measurements;
	}

	/**
	 * Sets the value of the measurements property.
	 *
	 * @param value
	 *     allowed object is
	 *     {@link CompartmentsType }
	 *
	 */
	public void setMeasurements(HashMap<Integer, CompartmentType> value) {
		this.measurements = value;
	}

	/**
	 * Gets the value of the settlements property.
	 *
	 * @return
	 *     possible object is
	 *     {@link CompartmentsType }
	 *
	 */
	public HashMap<Integer, CompartmentType> getSettlements() {
		if (this.settlements == null) this.settlements = new HashMap<Integer, CompartmentType>();
		return settlements;
	}

	/**
	 * Sets the value of the settlements property.
	 *
	 * @param value
	 *     allowed object is
	 *     {@link CompartmentsType }
	 *
	 */
	public void setSettlements(HashMap<Integer, CompartmentType> value) {
		this.settlements = value;
	}

	/**
	 * Gets the value of the scores property.
	 *
	 * @return
	 *     possible object is
	 *     {@link PointsType }
	 *
	 */
	public HashMap<Integer, PointType> getScores() {
		if (this.scores == null) this.scores = new HashMap<Integer, PointType>();
		return scores;
	}

	/**
	 * Sets the value of the scores property.
	 *
	 * @param value
	 *     allowed object is
	 *     {@link PointsType }
	 *
	 */

	public void setScores(HashMap<Integer, PointType> value) {
		this.scores = value;
	}


	/* non JAXB members : start */

	public static Path getCacheDirectory() {
		return Paths.get(Settings.getInstance().getApplHomePath(), Settings.HISTO_CACHE_ENTRIES_DIR_NAME);
	}

	/**
	 * @return context singleton (creating the context is slow)
	 */
	public static JAXBContext getJaxbContext() {
		if (HistoVault.jaxbContext == null) {
			try {
				HistoVault.jaxbContext = JAXBContext.newInstance(HistoVault.class);
			}
			catch (Exception e) {
				throw new RuntimeException(e);
			}
		}
		return HistoVault.jaxbContext;
	}

	/**
	 * @return cached instance (unmarshaller is not thread safe) which is ~100 ms faster than creating a new instance from a cached JaxbContext instance
	 */
	public static Unmarshaller getUnmarshaller() {
		if (HistoVault.jaxbUnmarshaller == null) {
			final Path path = getCacheDirectory().resolve(Settings.HISTO_CACHE_ENTRIES_XSD_NAME);
			try {
				HistoVault.jaxbUnmarshaller = getJaxbContext().createUnmarshaller();
				HistoVault.jaxbUnmarshaller.setSchema(SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI).newSchema(path.toFile()));
			}
			catch (Exception e) {
				throw new RuntimeException(e);
			}
		}
		return HistoVault.jaxbUnmarshaller;
	}

	/**
	 * @return cached instance (marshaller is not thread safe) which is ~100 ms faster than creating a new instance from a cached JaxbContext instance
	 */
	public static Marshaller getMarshaller() {
		if (HistoVault.jaxbMarshaller == null) {
			final Path path = getCacheDirectory().resolve(Settings.HISTO_CACHE_ENTRIES_XSD_NAME);
			try {
				HistoVault.jaxbMarshaller = getJaxbContext().createMarshaller();
				HistoVault.jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
				HistoVault.jaxbMarshaller.setSchema(SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI).newSchema(path.toFile()));
			}
			catch (Exception e) {
				throw new RuntimeException(e);
			}
		}
		return HistoVault.jaxbMarshaller;
	}

	@Deprecated // for marshalling purposes only
	public HistoVault() {
	}

	/**
	 * @param objectDirectory validated object key
	 * @param filePath file name + lastModified + file length are a simple solution for getting a SHA-1 hash from the file contents
	 * @param fileLastModified_ms
	 * @param fileLength in bytes
	 * @param fileVersion is the version of the log origin file
	 * @param logRecordSetSize is the number of recordsets in the log origin file
	 * @param logRecordSetOrdinal identifies multiple recordsets in one single file (0-based)
	 * @param logRecordSetBaseName the base name without recordset number
	 * @param logStartTimestamp_ms of the log or recordset
	 * @param logDeviceName
	 * @param logChannelNumber may differ from UI settings in case of channel mix
	 * @param logObjectKey may differ from UI settings (empty in OSD files, validated parent path for bin files)
	 */
	public HistoVault(String objectDirectory, Path filePath, long fileLastModified_ms, long fileLength, int fileVersion, int logRecordSetSize, int logRecordSetOrdinal, String logRecordSetBaseName,
			String logDeviceName, long logStartTimestamp_ms, int logChannelNumber, String logObjectKey) {
		this.vaultDataExplorerVersion = GDE.VERSION;
		this.vaultDeviceKey = VaultManager.getActiveDeviceKey();
		this.vaultDeviceName = this.application.getActiveDevice().getName();
		this.vaultChannelNumber = this.application.getActiveChannelNumber();
		this.vaultObjectKey = this.application.getObjectKey();
		this.vaultSamplingTimespanMs = this.settings.getSamplingTimespan_ms();
		this.logFilePath = filePath.toString(); // toString in order to avoid 'Object' during marshalling
		this.logFileLastModified = fileLastModified_ms;
		this.logFileLength = fileLength;
		this.logFileVersion = fileVersion;
		this.logRecordSetSize = logRecordSetSize;
		this.logObjectDirectory = objectDirectory;
		this.logRecordSetOrdinal = logRecordSetOrdinal;
		this.logRecordsetBaseName = logRecordSetBaseName;
		this.logDeviceName = logDeviceName;
		this.logChannelNumber = logChannelNumber;
		this.logObjectKey = logObjectKey;
		this.logStartTimestampMs = logStartTimestamp_ms;

		this.vaultDirectory = VaultManager.getVaultsDirectoryName();
		this.vaultName = VaultManager.getVaultName(filePath, fileLastModified_ms, fileLength, logRecordSetOrdinal);
		this.vaultCreatedMs = System.currentTimeMillis();
		if (log.isLoggable(Level.FINER)) log.log(Level.FINER,
				String.format("HistoVault.ctor  objectDirectory=%s  path=%s  lastModified=%s  logRecordSetOrdinal=%d  logRecordSetBaseName=%s  startTimestamp_ms=%d   channelConfigNumber=%d   objectKey=%s", //$NON-NLS-1$
						objectDirectory, filePath.getFileName().toString(), logRecordSetBaseName, StringHelper.getFormatedTime("yyyy-MM-dd HH:mm:ss.SSS", this.logFileLastModified), //$NON-NLS-1$
						StringHelper.getFormatedTime("yyyy-MM-dd HH:mm:ss.SSS", this.logStartTimestampMs), logChannelNumber, logObjectKey)); //$NON-NLS-1$
		if (log.isLoggable(Level.FINER)) log.log(Level.FINER, String.format("vaultDirectory=%s  vaultName=%s", this.vaultDirectory, this.vaultName)); //$NON-NLS-1$
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append(this.vaultName).append(GDE.STRING_COMMA_BLANK);
		sb.append("isTruss=").append(isTruss()).append(GDE.STRING_COMMA_BLANK); //$NON-NLS-1$
		sb.append("logRecordSetOrdinal=").append(this.logRecordSetOrdinal).append(GDE.STRING_COMMA_BLANK); //$NON-NLS-1$
		sb.append("logRecordsetBaseName=").append(this.logRecordsetBaseName).append(GDE.STRING_COMMA_BLANK); //$NON-NLS-1$
		sb.append("logChannelNumber=").append(this.logChannelNumber).append(GDE.STRING_COMMA_BLANK); //$NON-NLS-1$
		sb.append("logObjectKey=").append(this.logObjectKey).append(GDE.STRING_COMMA_BLANK); //$NON-NLS-1$
		sb.append("logStartTimestampMs=").append(this.logStartTimestampMs).append(GDE.STRING_COMMA_BLANK); //$NON-NLS-1$
		sb.append(this.logFilePath).append(GDE.STRING_COMMA_BLANK);
		sb.append("vaultDirectory=").append(this.vaultDirectory); //$NON-NLS-1$
		return sb.toString();
	}

	/**
	 * @param measurementOrdinal may specify an ordinal which is not present in the vault (earlier osd file - measurements added in the meantime)
	 * @return empty in case of unavailable measurement
	 */
	public HashMap<Integer, PointType> getMeasurementPoints(int measurementOrdinal) {
		return this.getMeasurements().containsKey(measurementOrdinal) ? new HashMap<Integer, PointType>() : this.getMeasurements().get(measurementOrdinal).getTrails();
	}

	/**
	 * @param measurementOrdinal may specify an ordinal which is not present in the vault (earlier osd file - measurements added in the meantime)
	 * @param trailOrdinal
	 * @return null in case of unavailable measurement or trail
	 */
	public Integer getMeasurementPoint(int measurementOrdinal, int trailOrdinal) {
		if (this.getMeasurements().containsKey(measurementOrdinal)) {
			return this.getMeasurements().get(measurementOrdinal).getTrails().containsKey(trailOrdinal) ? this.getMeasurements().get(measurementOrdinal).getTrails().get(trailOrdinal).value : null;
		}
		else {
			return null;
		}
	}

	/**
	 * @param settlementId may specify an ordinal which is not present in the vault (earlier osd file - measurements added in the meantime)
	 * @return empty in case of unavailable settlementId
	 */
	public HashMap<Integer, PointType> getSettlementPoints(int settlementId) {
		return this.getSettlements().containsKey(settlementId) ? new HashMap<Integer, PointType>() : this.getSettlements().get(settlementId).getTrails();
	}

	/**
	 * @param settlementId may specify an ordinal which is not present in the vault (earlier osd file - measurements added in the meantime)
	 * @param trailOrdinal
	 * @return null in case of unavailable settlement or trail
	 */
	public Integer getSettlementPoint(int settlementId, int trailOrdinal) {
		if (this.getSettlements().containsKey(settlementId)) {
			return this.getSettlements().get(settlementId).getTrails().containsKey(trailOrdinal) ? this.getSettlements().get(settlementId).getTrails().get(trailOrdinal).value : null;
		}
		else {
			return null;
		}
	}

	public HashMap<Integer, PointType> getScorePoints() {
		return this.getScores();
	}

	/**
	 * @param scoreLabelOrdinal
	 * @return null in case of unavailable score
	 */
	public Integer getScorePoint(int scoreLabelOrdinal) {
		return this.getScores().get(scoreLabelOrdinal).getValue();
	}

	/**
	 * @return yyyy-MM-dd HH:mm:ss
	 */
	public String getStartTimeStampFormatted() {
		return StringHelper.getFormatedTime("yyyy-MM-dd HH:mm:ss", this.logStartTimestampMs); //$NON-NLS-1$
	}

	/**
	 * @return relative path (directory name)
	 */
	public Path getVaultDirectoryPath() {
		return Paths.get(this.vaultDirectory);
	}

	public Path getVaultFileName() {
		return Paths.get(this.vaultName);
	}

	/**
	 * @return the non-validated object key or alternatively (if empty) the non-validated object directory
	 */
	public String getRectifiedObjectKey() {
		return this.logObjectKey.isEmpty() ? this.logObjectDirectory : this.logObjectKey;
	}

	/**
	 * @return the validated object key
	 */
	public Optional<String> getValidatedObjectKey() {
		return this.settings.getValidatedObjectKey(this.logObjectKey);
	}

	/**
	 * @return boolean value to verify if given object key is valid
	 */
	public boolean isValidObjectKey(final String objectKey) {
		return this.settings.getValidatedObjectKey(objectKey).isPresent();
	}

	public boolean isTruss() {
		return this.getMeasurements().isEmpty();
	}

	/**
	 * @return the log file path
	 */
	public Path getLogFileAsPath() {
		return Paths.get(this.logFilePath);
	}

	/**
	* Leverages the xml marshalling to sorted key value pairs due to TreeMap conversion.
	*/
	public static class CompartmentsTypeAdapter extends XmlAdapter<CompartmentsType, HashMap<Integer, CompartmentType>> {

		@Override
		public HashMap<Integer, CompartmentType> unmarshal(CompartmentsType values) {
			HashMap<Integer, CompartmentType> map = new HashMap<Integer, CompartmentType>();
			if (values != null) {
				for (CompartmentType value : values.compartment)
					map.put(value.id, value);
			}
			return map;
		}

		@Override
		public CompartmentsType marshal(HashMap<Integer, CompartmentType> map) {
			CompartmentsType aList = new CompartmentsType();
			aList.compartment = map == null ? new ArrayList<CompartmentType>() : new ArrayList<CompartmentType>(new TreeMap<>(map).values());
			return aList;
		}
	}

	/**
	* Leverages the xml marshalling to key value pairs.
	*/
	public static class PointsTypeAdapter extends XmlAdapter<PointsType, HashMap<Integer, PointType>> {

		@Override
		public HashMap<Integer, PointType> unmarshal(PointsType values) {
			HashMap<Integer, PointType> map = new HashMap<Integer, PointType>();
			if (values != null) {
				for (PointType value : values.point)
					map.put(value.id, value);
			}
			return map;
		}

		@Override
		public PointsType marshal(HashMap<Integer, PointType> map) {
			PointsType aList = new PointsType();
			aList.point = map == null ? new ArrayList<PointType>() : new ArrayList<PointType>(map.values());
			return aList;
		}
	}

}
