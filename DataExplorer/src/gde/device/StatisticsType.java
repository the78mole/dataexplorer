//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.1.5-b01-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon re-compilation of the source schema. 
// Generated on: 2009.11.15 at 10:25:53 AM MEZ 
//

package gde.device;


import gde.GDE;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;

/**
 * <p>Java class for StatisticsType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="StatisticsType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="trigger" type="{}triggerType" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="min" use="required" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="max" use="required" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="avg" use="required" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="sigma" use="required" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="triggerRefOrdinal" type="{http://www.w3.org/2001/XMLSchema}integer" />
 *       &lt;attribute name="sumByTriggerRefOrdinal" type="{http://www.w3.org/2001/XMLSchema}integer" />
 *       &lt;attribute name="integrateByTrigger" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="sumTriggerText" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="countByTrigger" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="countTriggerText" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="comment" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="sumTriggerTimeText" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="ratioRefOrdinal" type="{http://www.w3.org/2001/XMLSchema}integer" />
 *       &lt;attribute name="ratioText" type="{http://www.w3.org/2001/XMLSchema}string" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "StatisticsType", propOrder = { "trigger" })
public class StatisticsType implements Cloneable {

  protected TriggerType trigger;
	@XmlAttribute(required = true)
	protected boolean									min;
	@XmlAttribute(required = true)
	protected boolean									max;
	@XmlAttribute(required = true)
	protected boolean									avg;
	@XmlAttribute(required = true)
	protected boolean									sigma;
	@XmlAttribute
	protected Integer									triggerRefOrdinal;
	@XmlAttribute
	protected Integer									sumByTriggerRefOrdinal;
	@XmlAttribute
	protected Integer									sumBySecondaryTriggerRefOrdinal;
	@XmlAttribute
	protected Boolean									integrateByTrigger;
	@XmlAttribute
	protected String									sumTriggerText;
	@XmlAttribute
	protected Boolean									countByTrigger;
	@XmlAttribute
	protected String									countTriggerText;
	@XmlAttribute
	protected String									comment;
	@XmlAttribute
	protected String									sumTriggerTimeText;
	@XmlAttribute
	protected Integer									ratioRefOrdinal;
	@XmlAttribute
	protected String									ratioText;

	/**
	 * default constructor
	 */
	public StatisticsType() {
		//ignore
	}

	/**
	 * copy constructor
	 * @param statistics
	 */
	private StatisticsType(StatisticsType statistics) {
	  this.trigger = statistics.trigger;
		this.min = statistics.min;
		this.max = statistics.max;
		this.avg = statistics.avg;
		this.sigma = statistics.sigma;
		this.triggerRefOrdinal = statistics.triggerRefOrdinal;
		this.integrateByTrigger = statistics.integrateByTrigger;
		this.sumByTriggerRefOrdinal = statistics.sumByTriggerRefOrdinal;
		this.sumTriggerText = statistics.sumTriggerText;
		this.countByTrigger = statistics.countByTrigger;
		this.countTriggerText = statistics.countTriggerText;
		this.comment = statistics.comment;
		this.sumTriggerTimeText = statistics.sumTriggerTimeText;
		this.ratioRefOrdinal = statistics.ratioRefOrdinal;
		this.ratioText = statistics.ratioText;
	}

	/**
	 * clone method - calls the private copy constructor
	 */
	@Override
	public StatisticsType clone() {
		try {
			super.clone();
		}
		catch (CloneNotSupportedException e) {
			// ignore
		}
		return new StatisticsType(this);
	}

	/**
	 * Gets the value of the trigger property.
	 * 
	 * @return
	 *     possible object is
     *     {@link TriggerType }
	 *     
	 */
    public TriggerType getTrigger() {
		return this.trigger;
	}

	/**
	 * Sets the value of the trigger property.
	 * 
	 * @param value
	 *     allowed object is
	 *     {@link TriggerType }
	 *     
	 */
	public void setTrigger(TriggerType value) {
		this.trigger = value;
	}

	/**
	 * Gets the value of the trigger property.
	 */
    public void removeTrigger() {
		this.trigger = null;
	}

	/**
	 * Gets the value of the min property.
	 * 
	 */
	public boolean isMin() {
		return this.min;
	}

	/**
	 * Sets the value of the min property.
	 * 
	 */
	public void setMin(boolean value) {
		this.min = value;
	}

	/**
	 * Gets the value of the max property.
	 * 
	 */
	public boolean isMax() {
		return this.max;
	}

	/**
	 * Sets the value of the max property.
	 * 
	 */
	public void setMax(boolean value) {
		this.max = value;
	}

	/**
	 * Gets the value of the avg property.
	 * 
	 */
	public boolean isAvg() {
		return this.avg;
	}

	/**
	 * Sets the value of the avg property.
	 * 
	 */
	public void setAvg(boolean value) {
		this.avg = value;
	}

	/**
	 * Gets the value of the sigma property.
	 * 
	 */
	public boolean isSigma() {
		return this.sigma;
	}

	/**
	 * Sets the value of the sigma property.
	 * 
	 */
	public void setSigma(boolean value) {
		this.sigma = value;
	}

	/**
	 * Gets the value of the triggerRefOrdinal property.
	 * 
	 * @return
	 *     possible object is
	 *     {@link Integer }
	 *     
	 */
	public Integer getTriggerRefOrdinal() {
		return this.triggerRefOrdinal;
	}

	/**
	 * Sets the value of the triggerRefOrdinal property.
	 * 
	 * @param value
	 *     allowed object is
	 *     {@link Integer }
	 *     
	 */
	public void setTriggerRefOrdinal(Integer value) {
		this.triggerRefOrdinal = value;
	}

	/**
	 * Gets the value of the sumByTriggerRefOrdinal property.
	 * 
	 * @return
	 *     possible object is
	 *     {@link Integer }
	 *     
	 */
	public Integer getSumByTriggerRefOrdinal() {
		return this.sumByTriggerRefOrdinal;
	}

	/**
	 * Sets the value of the sumByTriggerRefOrdinal property.
	 * 
	 * @param value
	 *     allowed object is
	 *     {@link Integer }
	 *     
	 */
	public void setSumByTriggerRefOrdinal(Integer value) {
		this.sumByTriggerRefOrdinal = value;
	}

	/**
	 * Gets the value of the sumByTriggerRefOrdinal property.
	 * 
	 * @return
	 *     possible object is
	 *     {@link Integer }
	 *     
	 */
	public Integer getSumBySecondaryTriggerRefOrdinal() {
		return this.sumBySecondaryTriggerRefOrdinal;
	}

	/**
	 * Sets the value of the sumByTriggerRefOrdinal property.
	 * 
	 * @param value
	 *     allowed object is
	 *     {@link Integer }
	 *     
	 */
	public void setSumBySecondaryTriggerRefOrdinal(Integer value) {
		this.sumBySecondaryTriggerRefOrdinal = value;
	}

	/**
	 * get the value of the integrateByTrigger property.
	 */
	public boolean isIntegrateByTrigger() {
		return this.integrateByTrigger == null ? false : this.integrateByTrigger;
	}

	/**
	 * set the value of the integrateByTrigger property.
	 * 
	 */
	public void setIntegrateByTrigger(Boolean value) {
		this.integrateByTrigger = value;
	}

	/**
	 * Gets the value of the sumTriggerText property.
	 * 
	 * @return
	 *     possible object is
	 *     {@link String }
	 *     
	 */
	public String getSumTriggerText() {
		return this.sumTriggerText;
	}

	/**
	 * Sets the value of the sumTriggerText property.
	 * 
	 * @param value
	 *     allowed object is
	 *     {@link String }
	 *     
	 */
	public void setSumTriggerText(String value) {
		this.sumTriggerText = value;
	}

	/**
	 * Gets the value of the countByTrigger property.
	 * 
	 * @return
	 *     possible object is
	 *     {@link Boolean }
	 *     
	 */
	public Boolean isCountByTrigger() {
		return this.countByTrigger;
	}

	/**
	 * Sets the value of the countByTrigger property.
	 * 
	 * @param value
	 *     allowed object is
	 *     {@link Boolean }
	 *     
	 */
	public void setCountByTrigger(Boolean value) {
		this.countByTrigger = value;
	}

	/**
	 * Gets the value of the countTriggerText property.
	 * 
	 * @return
	 *     possible object is
	 *     {@link String }
	 *     
	 */
	public String getCountTriggerText() {
		return this.countTriggerText;
	}

	/**
	 * Sets the value of the countTriggerText property.
	 * 
	 * @param value
	 *     allowed object is
	 *     {@link String }
	 *     
	 */
	public void setCountTriggerText(String value) {
		this.countTriggerText = value;
	}

	/**
	 * Gets the value of the comment property.
	 * 
	 * @return
	 *     possible object is
	 *     {@link String }
	 *     
	 */
	public String getComment() {
		return this.comment;
	}

	/**
	 * Sets the value of the comment property.
	 * 
	 * @param value
	 *     allowed object is
	 *     {@link String }
	 *     
	 */
	public void setComment(String value) {
		this.comment = value;
	}

	/**
	 * Gets the value of the sumTriggerTimeText property.
	 * 
	 * @return
	 *     possible object is
	 *     {@link String }
	 *     
	 */
	public String getSumTriggerTimeText() {
		return this.sumTriggerTimeText;
	}

	/**
	 * Sets the value of the sumTriggerTimeText property.
	 * 
	 * @param value
	 *     allowed object is
	 *     {@link String }
	 *     
	 */
	public void setSumTriggerTimeText(String value) {
		this.sumTriggerTimeText = value;
	}

	/**
	 * Gets the value of the ratioRefOrdinal property.
	 * 
	 * @return
	 *     possible object is
	 *     {@link BigInteger }
	 *     
	 */
	public Integer getRatioRefOrdinal() {
		return this.ratioRefOrdinal;
	}

	/**
	 * Sets the value of the ratioRefOrdinal property.
	 * 
	 * @param value
	 *     allowed object is
	 *     {@link BigInteger }
	 *     
	 */
	public void setRatioRefOrdinal(Integer value) {
		this.ratioRefOrdinal = value;
	}

	/**
	 * Gets the value of the ratioComment property.
	 * 
	 * @return
	 *     possible object is
	 *     {@link String }
	 *     
	 */
	public String getRatioText() {
		return this.ratioText;
	}

	/**
	 * Sets the value of the ratioComment property.
	 * 
	 * @param value
	 *     allowed object is
	 *     {@link String }
	 *     
	 */
	public void setRatioText(String value) {
		this.ratioText = value;
	}

	/**
	 * serialize statistics type as string
	 */
	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
//<statistics min="true" max="true" avg="true" sigma="true" countByTrigger="true" countTriggerText="Anzahl Motorsteigflüge:" sumTriggerTimeText="Gesamte Motorlaufzeit:">
//<statistics min="true" max="true" avg="true" sigma="true" sumByTriggerRefOrdinal="9" sumTriggerText="Mit Motorsteigflügen erreichte Höhe" ratioRefOrdinal="10" ratioText="Verbrauchte Kapazität/Höhen-Meter:"/>
//<trigger level="3000" isGreater="true" minTimeSec="10" comment="Motorstromtrigger: &gt;3A, &gt;10 Sekunden"/>
		sb.append(String.format("statistics min=%b max=%b avg=%b sigma=%b", this.min, this.max, this.avg, this.sigma));
		if (triggerRefOrdinal != null) sb.append(String.format(" triggerRefOrdinal=%d", this.triggerRefOrdinal));
		if (sumByTriggerRefOrdinal != null) sb.append(String.format(" sumByTriggerRefOrdinal=%d", this.sumByTriggerRefOrdinal));
		if (sumTriggerText != null) sb.append(String.format(" sumTriggerText=%s", this.sumTriggerText.replace(GDE.CHAR_BLANK, GDE.CHAR_UNDER_BAR)));
		if (countByTrigger != null) sb.append(String.format(" countByTrigger=%b", this.countByTrigger));
		if (countTriggerText != null) sb.append(String.format(" countTriggerText=%s", this.countTriggerText.replace(GDE.CHAR_BLANK, GDE.CHAR_UNDER_BAR)));
		if (comment != null) sb.append(String.format(" comment=%s", this.comment.replace(GDE.CHAR_BLANK, GDE.CHAR_UNDER_BAR)));
		if (sumTriggerTimeText != null) sb.append(String.format(" sumTriggerTimeText=%s", this.sumTriggerTimeText.replace(GDE.CHAR_BLANK, GDE.CHAR_UNDER_BAR)));
		if (ratioRefOrdinal != null) sb.append(String.format(" ratioRefOrdinal=%d", this.ratioRefOrdinal));
		if (ratioText != null) sb.append(String.format(" ratioText=%s", this.ratioText.replace(GDE.CHAR_BLANK, GDE.CHAR_UNDER_BAR)));

		if (this.trigger != null) {
			sb.append(String.format(" trigger level=%s isGreater=%b minTimeSec=%s", this.trigger.level, this.trigger.isGreater, this.trigger.minTimeSec));
			if (this.trigger.comment != null)
				sb.append(String.format(" comment=%s", this.trigger.comment.replace(GDE.CHAR_BLANK, GDE.CHAR_UNDER_BAR)));
		}
		
		return sb.toString();
	}
	
	/**
	 * parse stringified statistics to StatisticsType
	 * @param statisticsAsText
	 * @return
	 */
	public static StatisticsType fromString(String statisticsAsText) {
		StatisticsType statistics = new StatisticsType();
		String[] tmpStatistics = statisticsAsText.split(" trigger ");
		if (tmpStatistics.length == 2) { // statistics contains a defined trigger
			TriggerType tmpTrigger = new TriggerType();
			for (String property : tmpStatistics[1].split(GDE.STRING_BLANK)) {
				String[] props = property.split(GDE.STRING_EQUAL);
				if (props.length == 2) { //contains =
					if (props[0].equals("level")) tmpTrigger.level = Integer.valueOf(props[1]);
					else if (props[0].equals("isGreater")) tmpTrigger.isGreater = Boolean.valueOf(props[1]);
					else if (props[0].equals("minTimeSec")) tmpTrigger.minTimeSec = Integer.valueOf(props[1]);
					else if (props[0].equals("comment")) tmpTrigger.comment = props[1].replace(GDE.CHAR_UNDER_BAR, GDE.CHAR_BLANK);
				}
			}
			statistics.setTrigger(tmpTrigger);
		}
		String strStatistics = tmpStatistics.length == 2 ? tmpStatistics[0] : statisticsAsText;
		for (String property : strStatistics.split(GDE.STRING_BLANK)) {
			String[] props = property.split(GDE.STRING_EQUAL);
			if (props.length == 2) { //contains =
				if (props[0].equals("min")) statistics.min = Boolean.valueOf(props[1]);
				else if (props[0].equals("max")) statistics.max = Boolean.valueOf(props[1]);
				else if (props[0].equals("avg")) statistics.avg = Boolean.valueOf(props[1]);
				else if (props[0].equals("sigma")) statistics.sigma = Boolean.valueOf(props[1]);
				else if (props[0].equals("triggerRefOrdinal")) statistics.triggerRefOrdinal = Integer.valueOf(props[1]);
				else if (props[0].equals("sumByTriggerRefOrdinal")) statistics.sumByTriggerRefOrdinal = Integer.valueOf(props[1]);
				else if (props[0].equals("sumTriggerText")) statistics.sumTriggerText = props[1].replace(GDE.CHAR_UNDER_BAR, GDE.CHAR_BLANK);
				else if (props[0].equals("countByTrigger")) statistics.countByTrigger = Boolean.valueOf(props[1]);
				else if (props[0].equals("countTriggerText")) statistics.countTriggerText = props[1].replace(GDE.CHAR_UNDER_BAR, GDE.CHAR_BLANK);
				else if (props[0].equals("comment")) statistics.comment = props[1].replace(GDE.CHAR_UNDER_BAR, GDE.CHAR_BLANK);				
				else if (props[0].equals("sumTriggerTimeText")) statistics.sumTriggerTimeText = props[1].replace(GDE.CHAR_UNDER_BAR, GDE.CHAR_BLANK);
				else if (props[0].equals("ratioRefOrdinal")) statistics.ratioRefOrdinal = Integer.valueOf(props[1]);
				else if (props[0].equals("ratioText")) statistics.ratioText = props[1].replace(GDE.CHAR_UNDER_BAR, GDE.CHAR_BLANK);			
			}
		}
		
		return statistics;
	}
}
