//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.1.5-b01-fcs
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2017.01.24 at 12:21:31 PM MEZ
//


package gde.device;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;

import gde.Analyzer;
import gde.data.Record.DataType;
import gde.histo.cache.HistoVault;
import gde.histo.recordings.ScoregroupTrailSelector;
import gde.histo.recordings.TrailSelector;


/**
 * <p>Java class for ScoreGroupType complex type.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>
 * &lt;complexType name="ScoreGroupType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="name" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="symbol" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="unit" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="active" type="{http://www.w3.org/2001/XMLSchema}boolean"/>
 *         &lt;element name="score" type="{}ScoreType" maxOccurs="unbounded"/>
 *         &lt;element name="property" type="{}PropertyType" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="label" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="scoregroupId" use="required" type="{http://www.w3.org/2001/XMLSchema}int" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 *
 *
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ScoreGroupType", propOrder = {
    "name",
    "symbol",
    "unit",
    "active",
    "score",
    "property",
    "label"
})
public class ScoreGroupType implements IChannelItem {

    @XmlElement(required = true)
    protected String name;
    @XmlElement(required = true)
    protected String symbol;
    @XmlElement(required = true)
    protected String unit;
    protected boolean active;
    @XmlElement(required = true)
    protected List<ScoreType> score;
    protected List<PropertyType> property;
    protected String label;
    @XmlAttribute(name = "scoregroupId", required = true)
    protected int scoreGroupId;

  	@XmlTransient
  	protected DataType						dataType;

    /**
     * Gets the value of the name property.
     *
     * @return
     *     possible object is
     *     {@link String }
     *
     */
    @Override
		public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     *
     * @param value
     *     allowed object is
     *     {@link String }
     *
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Gets the value of the symbol property.
     *
     * @return
     *     possible object is
     *     {@link String }
     *
     */
    @Override
		public String getSymbol() {
        return symbol;
    }

    /**
     * Sets the value of the symbol property.
     *
     * @param value
     *     allowed object is
     *     {@link String }
     *
     */
    public void setSymbol(String value) {
        this.symbol = value;
    }

    /**
     * Gets the value of the unit property.
     *
     * @return
     *     possible object is
     *     {@link String }
     *
     */
    @Override
		public String getUnit() {
        return unit;
    }

    /**
     * Sets the value of the unit property.
     *
     * @param value
     *     allowed object is
     *     {@link String }
     *
     */
    public void setUnit(String value) {
        this.unit = value;
    }

    /**
     * Gets the value of the active property.
     *
     */
    @Override
		public boolean isActive() {
        return active;
    }

    /**
     * Sets the value of the active property.
     *
     */
    public void setActive(boolean value) {
        this.active = value;
    }

    /**
     * Gets the value of the score property.
     *
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the score property.
     *
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getScore().add(newItem);
     * </pre>
     *
     *
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ScoreType }
     *
     *
     */
    public List<ScoreType> getScore() {
        if (score == null) {
            score = new ArrayList<ScoreType>();
        }
        return this.score;
    }

    /**
     * Gets the value of the property property.
     *
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the property property.
     *
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getProperty().add(newItem);
     * </pre>
     *
     *
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link PropertyType }
     *
     *
     */
    @Override
		public List<PropertyType> getProperty() {
        if (property == null) {
            property = new ArrayList<PropertyType>();
        }
        return this.property;
    }

    /**
     * Gets the value of the label property.
     *
     * @return
     *     possible object is
     *     {@link String }
     *
     */
    @Override
		public String getLabel() {
        return label;
    }

    /**
     * Sets the value of the label property.
     *
     * @param value
     *     allowed object is
     *     {@link String }
     *
     */
    public void setLabel(String value) {
        this.label = value;
    }

    @Override
		public String getChannelItemId() {
        return "" + scoreGroupId + "_" + name;
    }

    /**
     * Gets the value of the scoreGroupId property.
     *
     */
    public int getScoreGroupId() {
        return scoreGroupId;
    }

    /**
     * Sets the value of the scoreGroupId property.
     *
     */
    public void setScoreGroupId(int value) {
        this.scoreGroupId = value;
    }

  	/**
  	 * @param propertyKey
  	 * @param type
  	 * @param value
  	 */
  	private void createProperty(String propertyKey, DataTypes type, Object value) {
  		ObjectFactory factory = new ObjectFactory();
  		PropertyType newProperty = factory.createPropertyType();
  		newProperty.setName(propertyKey);
  		newProperty.setType(type);
  		newProperty.setValue("" + value); //$NON-NLS-1$
  		this.getProperty().add(newProperty);
  	}

  	/**
  	 * remove all property types
  	 */
  	public void removeProperties() {
  		Iterator<PropertyType> iterator = this.getProperty().iterator();

  		while (iterator.hasNext()) {
  			iterator.next();
  			iterator.remove();
  		}
  	}

  	/**
  	 * remove property type with given key (IDevice.OFFSET, ...)
  	 * @param propertyKey
  	 */
  	public void removeProperty(String propertyKey) {
  		Iterator<PropertyType> iterator = this.getProperty().iterator();

  		while (iterator.hasNext()) {
  			PropertyType tmpProp = iterator.next();
  			if (tmpProp.name.equals(propertyKey))
  				iterator.remove();
  		}
  	}

  	/**
  	 * get property type with given key (IDevice.OFFSET, ...)
  	 * @param propertyKey
  	 * @return PropertyType object
  	 */
  	@Override
		public PropertyType getProperty(String propertyKey) {
  		PropertyType tmpProperty = null;
  		List<PropertyType> properties = this.getProperty();
  		for (PropertyType propertyType : properties) {
  			if (propertyType.getName().equals(propertyKey)) {
  				tmpProperty = propertyType;
  				break;
  			}
  		}
  		return tmpProperty;
  	}

  	/**
  	 * get the offset value
  	 * @return the offset, if property does not exist return 0.0 as default value
  	 */
  	@Override
		public double getOffset() {
  		double value = 0.0;
  		PropertyType tmpProperty = this.getProperty(IDevice.OFFSET);
  		if (tmpProperty != null)
  			value = new Double(tmpProperty.getValue()).doubleValue();

  		return value;
  	}

  	/**
  	 * set new value for offset
  	 * @param offset the offset to set
  	 */
  	public void setOffset(double offset) {
  		PropertyType tmpProperty = this.getProperty(IDevice.OFFSET);
  		if (tmpProperty == null) {
  			createProperty(IDevice.OFFSET, DataTypes.DOUBLE, offset);
  		} else {
  			tmpProperty.setValue("" + offset); //$NON-NLS-1$
  		}
  	}

  	/**
  	 * get the reduction value
  	 * @return the offset, if property does not exist return 0.0 as default value
  	 */
  	@Override
		public double getReduction() {
  		double value = 0.0;
  		PropertyType tmpProperty = this.getProperty(IDevice.REDUCTION);
  		if (tmpProperty != null)
  			value = new Double(tmpProperty.getValue()).doubleValue();

  		return value;
  	}

  	/**
  	 * set new value for reduction
  	 * @param reduction the offset to set
  	 */
  	public void setReduction(double reduction) {
  		PropertyType tmpProperty = this.getProperty(IDevice.REDUCTION);
  		if (tmpProperty == null) {
  			createProperty(IDevice.REDUCTION, DataTypes.DOUBLE, reduction);
  		} else {
  			tmpProperty.setValue("" + reduction); //$NON-NLS-1$
  		}
  	}

  	/**
  	 * get the factor value
  	 * @return the factor, if property does not exist return 1.0 as default value
  	 */
  	@Override
		public double getFactor() {
  		double value = 1.0;
  		PropertyType tmpProperty = getProperty(IDevice.FACTOR);
  		if (tmpProperty != null)
  			value = new Double(tmpProperty.getValue()).doubleValue();

  		return value;
  	}

  	/**
  	 * set new value for factor
  	 * @param factor the offset to set
  	 */
  	public void setFactor(double factor) {
  		PropertyType tmpProperty = this.getProperty(IDevice.FACTOR);
  		if (tmpProperty == null) {
  			createProperty(IDevice.FACTOR, DataTypes.DOUBLE, factor);
  		} else {
  			tmpProperty.setValue("" + factor); //$NON-NLS-1$
  		}
  	}

  	@Override
  	public boolean isBits() {
  		boolean isBits = false;
  		PropertyType tmpProperty = this.getProperty(IDevice.IS_BITS);
  		if (tmpProperty != null) isBits = Boolean.parseBoolean(tmpProperty.getValue());
  		return isBits;
  	}

  	@Override
  	public boolean isTokens() {
  		boolean isBits = false;
  		PropertyType tmpProperty = this.getProperty(IDevice.IS_TOKENS);
  		if (tmpProperty != null) isBits = Boolean.parseBoolean(tmpProperty.getValue());
  		return isBits;
  	}

  	/**
  	 * get the SyncMaster ordinal value
  	 * @return the SyncMaster ordinal value, if property does not exist return -1
  	 */
  	@Override
  	public int getSyncMasterRecordOrdinal() {
  		int value = -1;
  		PropertyType tmpProperty = getProperty(IDevice.SYNC_ORDINAL);
  		if (tmpProperty != null) value = Integer.parseInt(tmpProperty.getValue());

  		return value;
  	}

  	@Override
		public Optional<TrailDisplayType> getTrailDisplay() {
			return Optional.empty();
		}

  	@Override
  	public Integer getVaultPoint(HistoVault vault, int trailOrdinal) {
  		return vault.getScorePoint(trailOrdinal);
  	}

  	@Override
  	public void setDataType(DataType dataType) {
  		this.dataType = dataType;
  	}

  	@Override
  	public DataType getDataType() {
  		return this.dataType;
  	}

  	@Override
  	public TrailSelector createTrailSelector(Analyzer analyzer, String recordName, boolean smartStatistics) {
  		return new ScoregroupTrailSelector(analyzer, this, recordName, smartStatistics);
  	}

		@Override
		public String toString() {
			final int maxLen = 10;
			return "ScoreGroupType [name=" + this.name + ", active=" + this.active + ", score=" + (this.score != null
					? this.score.subList(0, Math.min(this.score.size(), maxLen)) : null) + ", property=" + (this.property != null
							? this.property.subList(0, Math.min(this.property.size(), maxLen))
							: null) + ", label=" + this.label + ", scoreGroupId=" + this.scoreGroupId + ", dataType=" + this.dataType + "]";
		}

}
