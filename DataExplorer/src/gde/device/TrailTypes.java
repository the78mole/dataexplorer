//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.1.5-b01-fcs
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2017.02.01 at 06:11:55 PM MEZ
//

package gde.device;

import java.util.Arrays;
import java.util.EnumSet;
import java.util.List;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;

import gde.GDE;
import gde.device.resource.DeviceXmlResource;
import gde.messages.MessageIds;
import gde.messages.Messages;

/**
 * <p>Java class for trail_types.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="trail_types">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="real_avg"/>
 *     &lt;enumeration value="real_count"/>
 *     &lt;enumeration value="real_max"/>
 *     &lt;enumeration value="real_min"/>
 *     &lt;enumeration value="real_sd"/>
 *     &lt;enumeration value="real_first"/>
 *     &lt;enumeration value="real_last"/>
 *     &lt;enumeration value="real_sum_triggered"/>
 *     &lt;enumeration value="real_max_ratio_triggered"/>
 *     &lt;enumeration value="real_time_sum_triggered"/>
 *     &lt;enumeration value="real_count_triggered"/>
 *     &lt;enumeration value="real_sum"/>
 *     &lt;enumeration value="avg"/>
 *     &lt;enumeration value="max"/>
 *     &lt;enumeration value="min"/>
 *     &lt;enumeration value="sd"/>
 *     &lt;enumeration value="q0"/>
 *     &lt;enumeration value="q1"/>
 *     &lt;enumeration value="q2"/>
 *     &lt;enumeration value="q3"/>
 *     &lt;enumeration value="q4"/>
 *     &lt;enumeration value="q_25_permille"/>
 *     &lt;enumeration value="q_975_permille"/>
 *     &lt;enumeration value="q_lower_whisker"/>
 *     &lt;enumeration value="q_upper_whisker"/>
 *     &lt;enumeration value="count"/>
 *     &lt;enumeration value="first"/>
 *     &lt;enumeration value="last"/>
 *     &lt;enumeration value="sum"/>
 *     &lt;enumeration value="suite_real_avg_sd"/>
 *     &lt;enumeration value="suite_real_avg_min_max"/>
 *     &lt;enumeration value="suite_avg_sd"/>
 *     &lt;enumeration value="suite_avg_min_max"/>
 *     &lt;enumeration value="suite_box_plot"/>
 *     &lt;enumeration value="suite_box_plot_95"/>
 *     &lt;enumeration value="suite_q0_q2_q4"/>
 *     &lt;enumeration value="suite_q1_q2_q3"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 *
 */
@XmlType(name = "trail_types")
@XmlEnum
public enum TrailTypes {

	@XmlEnumValue("real_avg")
	REAL_AVG(0, false, false, Messages.getString(MessageIds.GDE_MSGT0750)), // average
	@XmlEnumValue("real_count")
	REAL_COUNT(12, false, true, Messages.getString(MessageIds.GDE_MSGT0751)), // counter
	@XmlEnumValue("real_max")
	REAL_MAX(1, false, false, Messages.getString(MessageIds.GDE_MSGT0754)), //
	@XmlEnumValue("real_min")
	REAL_MIN(2, false, false, Messages.getString(MessageIds.GDE_MSGT0755)), //
	@XmlEnumValue("real_sd")
	REAL_SD(3, true, false, Messages.getString(MessageIds.GDE_MSGT0756)), //
	@XmlEnumValue("real_first")
	REAL_FIRST(4, false, false, Messages.getString(MessageIds.GDE_MSGT0752)), //
	@XmlEnumValue("real_last")
	REAL_LAST(5, false, false, Messages.getString(MessageIds.GDE_MSGT0753)), //
	@XmlEnumValue("real_sum_triggered")
	REAL_SUM_TRIGGERED(6, false, true, Messages.getString(MessageIds.GDE_MSGT0758)), //
	@XmlEnumValue("real_max_ratio_triggered")
	REAL_MAX_RATIO_TRIGGERED(9, false, true, Messages.getString(MessageIds.GDE_MSGT0761)), //
	@XmlEnumValue("real_time_sum_triggered")
	REAL_TIME_SUM_TRIGGERED(7, false, true, Messages.getString(MessageIds.GDE_MSGT0759)), //
	@XmlEnumValue("real_count_triggered")
	REAL_COUNT_TRIGGERED(10, false, true, Messages.getString(MessageIds.GDE_MSGT0757)), //
	@XmlEnumValue("real_sum")
	REAL_SUM(11, false, true, Messages.getString(MessageIds.GDE_MSGT0762)), //

	@XmlEnumValue("avg")
	AVG(13, false, false, Messages.getString(MessageIds.GDE_MSGT0763), false), // average with zeros and without sigma fringe outliers
	@XmlEnumValue("max")
	MAX(14, false, false, Messages.getString(MessageIds.GDE_MSGT0764), false), // maximum with zeros and without sigma fringe outliers
	@XmlEnumValue("min")
	MIN(15, false, false, Messages.getString(MessageIds.GDE_MSGT0765), false), // minimum with zeros and without sigma fringe outliers
	@XmlEnumValue("sd")
	SD(16, true, false, Messages.getString(MessageIds.GDE_MSGT0766), false), // sigma with zeros and without sigma fringe outliers
	@XmlEnumValue("q0")
	Q0(17, false, false, Messages.getString(MessageIds.GDE_MSGT0767), false), // quantile 0 is q(0%) which is the minimum
	@XmlEnumValue("q1")
	Q1(18, false, false, Messages.getString(MessageIds.GDE_MSGT0768), false), // quantile 1 is q(25%)
	@XmlEnumValue("q2")
	Q2(19, false, false, Messages.getString(MessageIds.GDE_MSGT0769), false), // quantile 2 is q(50%) which is the median
	@XmlEnumValue("q3")
	Q3(20, false, false, Messages.getString(MessageIds.GDE_MSGT0770), false), // quantile 3 is q(75%)
	@XmlEnumValue("q4")
	Q4(21, false, false, Messages.getString(MessageIds.GDE_MSGT0771), false), // quantile 4 is q(100%) which is the maximum
	@XmlEnumValue("q_25_permille")
	Q_25_PERMILLE(22, false, false, Messages.getString(MessageIds.GDE_MSGT0772), false), // octile 1 is q(12,5%)
	@XmlEnumValue("q_975_permille")
	Q_975_PERMILLE(23, false, false, Messages.getString(MessageIds.GDE_MSGT0773), false), // octile 7 is q(87,5%)
	@XmlEnumValue("q_lower_whisker")
	Q_LOWER_WHISKER(24, false, false, Messages.getString(MessageIds.GDE_MSGT0774), false), // quantile of the closest value to the 4 * IQR lower limit
	@XmlEnumValue("q_upper_whisker")
	Q_UPPER_WHISKER(25, false, false, Messages.getString(MessageIds.GDE_MSGT0775), false), // quantile of the closest value to the 4 * IQR upper limit
	@XmlEnumValue("first")
	FIRST(30, false, false, Messages.getString(MessageIds.GDE_MSGT0776), false), //
	@XmlEnumValue("last")
	LAST(31, false, false, Messages.getString(MessageIds.GDE_MSGT0777), true), //
	@XmlEnumValue("sum")
	SUM(32, false, true, Messages.getString(MessageIds.GDE_MSGT0778), false), //
	@XmlEnumValue("count")
	COUNT(33, false, true, Messages.getString(MessageIds.GDE_MSGT0779), false), // counter

	@XmlEnumValue("suite_real_avg_sd")
	SUITE_REAL_AVG_SD(1001, Messages.getString(MessageIds.GDE_MSGT0780), false, new TrailTypes[] { REAL_AVG, REAL_SD, REAL_SD }), // avg, avg - n times sd, avg + n times sd
	@XmlEnumValue("suite_real_avg_min_max")
	SUITE_REAL_AVG_MIN_MAX(1002, Messages.getString(MessageIds.GDE_MSGT0781), false, new TrailTypes[] { REAL_AVG, REAL_MIN, REAL_MAX }), //
	@XmlEnumValue("suite_avg_sd")
	SUITE_AVG_SD(1008, Messages.getString(MessageIds.GDE_MSGT0782), true, new TrailTypes[] { AVG, SD, SD }), // avg, avg - n times sd, avg + n times sd
	@XmlEnumValue("suite_avg_min_max")
	SUITE_AVG_MIN_MAX(1009, Messages.getString(MessageIds.GDE_MSGT0783), true, new TrailTypes[] { AVG, MIN, MAX }), //
	@XmlEnumValue("suite_box_plot")
	SUITE_BOX_PLOT(1004, Messages.getString(MessageIds.GDE_MSGT0784), true, new TrailTypes[] { Q0, Q1, Q2, Q3, Q4, Q_LOWER_WHISKER, Q_UPPER_WHISKER }), // 4 * IQR range (John. W. Tukey)
	@XmlEnumValue("suite_box_plot_95")
	SUITE_BOX_PLOT_95(1005, Messages.getString(MessageIds.GDE_MSGT0785), true, new TrailTypes[] { Q0, Q1, Q2, Q3, Q4, Q_25_PERMILLE, Q_975_PERMILLE }), // 95% range
	@XmlEnumValue("suite_q0_q2_q4")
	SUITE_Q0_Q2_Q4(1006, Messages.getString(MessageIds.GDE_MSGT0786), true, new TrailTypes[] { Q2, Q0, Q4 }), //
	@XmlEnumValue("suite_q1_q2_q3")
	SUITE_Q1_Q2_Q3(1007, Messages.getString(MessageIds.GDE_MSGT0787), true, new TrailTypes[] { Q2, Q1, Q3 });

	public static final int										RANGE_PLOT_SIZE		= 3;
	public static final int										BOX_PLOT_SIZE			= 7;

	private final int													displaySequence;
	private final boolean											isAlienValue;
	private final boolean											isTriggered;
	private final String											displayName;
	private final boolean											isSubstitute;
	private final boolean											isSmartStatistics;
	private final int													suiteMasterIndex;
	private final int													suiteLowerIndex;
	private final int													suiteUpperIndex;

	/**
	 * Use this instead of values() to avoid repeatedly cloning actions.
	 */
	public static final TrailTypes						VALUES[]					= values();
	private static final TrailTypes						DISPLAY_VALUES[]	= values().clone();									// sorted

	private static final EnumSet<TrailTypes>	PRIMITIVES				= EnumSet.noneOf(TrailTypes.class);
	private static final EnumSet<TrailTypes>	SUITES						= EnumSet.noneOf(TrailTypes.class);
	private static final EnumSet<TrailTypes>	SUBSTITUTES				= EnumSet.noneOf(TrailTypes.class);
	private static TrailTypes									substitute				= null;

	private TrailTypes[]											suiteMembers			= new TrailTypes[0];

	private TrailTypes(int displaySequence, boolean isForSummation, boolean isTriggered, String displayName) { // legacy
		this.displaySequence = displaySequence;
		this.isAlienValue = isForSummation;
		this.isTriggered = isTriggered;
		this.displayName = displayName;
		this.isSubstitute = false;
		this.isSmartStatistics = false;
		this.suiteMasterIndex = 0;
		this.suiteLowerIndex = 0;
		this.suiteUpperIndex = 0;
	}

	private TrailTypes(int displaySequence, boolean isForSummation, boolean isTriggered, String displayName, boolean isSubstitute) {
		this.displaySequence = displaySequence;
		this.isAlienValue = isForSummation;
		this.isTriggered = isTriggered;
		this.displayName = displayName;
		this.isSubstitute = isSubstitute;
		this.isSmartStatistics = true;
		this.suiteMasterIndex = 0;
		this.suiteLowerIndex = 0;
		this.suiteUpperIndex = 0;
	}

	private TrailTypes(int displaySequence, String displayName, boolean isSmartStatistics, TrailTypes[] suiteMembers) { // suites
		this.displaySequence = displaySequence;
		this.isAlienValue = false;
		this.isTriggered = false;
		this.displayName = displayName;
		this.isSubstitute = false;
		this.isSmartStatistics = isSmartStatistics;
		this.suiteMembers = suiteMembers;
		if (isBoxPlot()) {
			this.suiteMasterIndex = 2;
			this.suiteLowerIndex = 5;
			this.suiteUpperIndex = 6;
		}
		else {
			this.suiteMasterIndex = 0;
			this.suiteLowerIndex = 1;
			this.suiteUpperIndex = 2;
		}
	}

	static {
		Arrays.sort(DISPLAY_VALUES, (o1, o2) -> o1.displaySequence < o2.displaySequence ? -1 : o1.displaySequence > o2.displaySequence ? +1 : 0);
		for (TrailTypes trailType : VALUES) {
			if (trailType.isSubstitute) SUBSTITUTES.add(trailType);
			if (trailType.isSubstitute) substitute = trailType;
			if (!trailType.isSuite()) PRIMITIVES.add(trailType);
			if (trailType.isSuite()) SUITES.add(trailType);
		}
	}

	public static TrailTypes fromDisplayName(String displayName) {
		if (displayName != null) {
			for (TrailTypes trailType : TrailTypes.VALUES) {
				if (displayName.equalsIgnoreCase(trailType.displayName)) {
					return trailType;
				}
			}
		}
		throw new IllegalArgumentException();
	}

	public static TrailTypes fromOrdinal(int ordinal) {
		return TrailTypes.VALUES[ordinal];
	}

	/**
	 * @return all trail types in display order
	 */
	public static TrailTypes[] getDisplayValues() {
		return DISPLAY_VALUES;
	}

	/**
	 * @return the valid default trail types in case no trails have been assigned to a measurement or settlement
	 */
	public static EnumSet<TrailTypes> getSubstitutes() {
		return SUBSTITUTES;
	}

	/**
	 * @return the default trail type
	 */
	public static TrailTypes getSubstitute() {
		if (substitute == null) throw new UnsupportedOperationException();
		return substitute;
	}

	/**
	 * @return the non-Suite trail types
	 */
	public static EnumSet<TrailTypes> getPrimitives() {
		return PRIMITIVES;
	}

	/**
	 * @return the suite trail types
	 */
	public static EnumSet<TrailTypes> getSuites() {
		return SUITES;
	}

	public String getSuiteMembersToString() {
		return Arrays.toString(this.suiteMembers);
	}

	public List<TrailTypes> getSuiteMembers() {
		return Arrays.asList(this.suiteMembers);
	}

	public TrailTypes getSuiteMember(int index) {
		return this.suiteMembers[index];
	}

	public TrailTypes[] getMembers() {
		if (this.suiteMembers.length == 0) {
			return new TrailTypes[] {this} ;
		}
		else
			return this.suiteMembers;
	}

	public boolean isRangePlot() {
		return this.suiteMembers.length == RANGE_PLOT_SIZE;
	}

	public boolean isBoxPlot() {
		return this.suiteMembers.length == BOX_PLOT_SIZE;
	}

	public boolean isSuite() {
		return this.suiteMembers.length > 1;
	}

	public String getDisplayName() {
		return this.displayName;
	}

	public String getDisplayNameWithTriggerText(IChannelItem channelItem) {
		if (this.isTriggered()) {
			StatisticsType measurementStatistics = ((MeasurementType) channelItem).getStatistics();
			if (this.equals(TrailTypes.REAL_COUNT_TRIGGERED)) {
				return getDeviceXmlReplacement(measurementStatistics.getCountTriggerText());
			} else if (this.equals(TrailTypes.REAL_SUM_TRIGGERED)) {
				return getDeviceXmlReplacement(measurementStatistics.getSumTriggerText());
			} else if (this.equals(TrailTypes.REAL_TIME_SUM_TRIGGERED)) {
				return getDeviceXmlReplacement(measurementStatistics.getSumTriggerTimeText());
			} else if (this.equals(TrailTypes.REAL_MAX_RATIO_TRIGGERED)) {
				return getDeviceXmlReplacement(measurementStatistics.getRatioText());
			} else
				throw new UnsupportedOperationException("TrailTypes.isTriggered"); //$NON-NLS-1$
		} else {
			return this.displayName;
		}
	}

	/**
	 * @param replacementKey
	 * @return the replacement name of the specified key or an empty string if there is no key entry
	 */
	private String getDeviceXmlReplacement(String replacementKey) {
		return replacementKey != null ? DeviceXmlResource.getInstance().getReplacement(replacementKey) : GDE.STRING_EMPTY;
	}


	/**
	 * @return true if these values are not in the number range of the measurement values (e.g. SD, counters)
	 */
	public boolean isAlienValue() {
		return this.isAlienValue;
	}

	public boolean isTriggered() {
		return this.isTriggered;
	}

	public int getDisplaySequence() {
		return this.displaySequence;
	}

	public boolean isSmartStatistics() {
		return this.isSmartStatistics;
	}

	/**
	 * @return the suite member index of the suite master record
	 */
	public int getSuiteMasterIndex() {
		return this.suiteMasterIndex;
	}

	/**
	 * @return the suite member index of the suite record below the master record
	 */
	public int getSuiteLowerIndex() {
		return this.suiteLowerIndex;
	}

	/**
	 * @return the suite member index of the suite record above the master record
	 */
	public int getSuiteUpperIndex() {
		return this.suiteUpperIndex;
	}

}
